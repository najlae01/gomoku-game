/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package gui;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import gomokugame.Gomoku;
import gomokugame.PlayGomoku;
import tools.ConnectionManager;
import tools.GomokuPosition;

/**
 *
 * @author MSI
 */
public class Home extends javax.swing.JFrame {

    Connection connection = null;
    ResultSet rs = null;
    PreparedStatement ps = null;

    public static int idUser = 0;      //----- To store the user Id
    public static int idPartie = 0;    //----- To store the game Id

    //------- Getters & Setters -----------
    public int getIdUser() {
        return this.idUser;
    }

    public void setIdUser(int idUser) {
        this.idUser = idUser;
    }

    //------------ Cosnstructor ----------
    public Home() throws SQLException, ClassNotFoundException {
        initComponents();

        //--------- Update game state
        Gomoku.gameOver = false;
        leftHintText.setEditable(false);
        leftBlackStonesText.setEditable(false);
        playPositionBtn.setEnabled(false);

        //--------- Connect to DB
        connection = ConnectionManager.getConnection();

        //------- Adjust game board
        PlayGomoku.gomoku.board.setBounds(0, 0, 570, 570);
        boardPane.add(PlayGomoku.gomoku.board);
        boardPane.repaint();

        /**
         * *********************************************************************
         * Retrieving game id and game state elements from the database
         * *******************************************************************
         */
        String qry = "select id_game, state, left_black_stones, left_white_stones, left_black_hints, left_white_hints from game where id_user = ?";
        this.ps = this.connection.prepareStatement(qry);
        this.ps.setInt(1, this.idUser);
        this.rs = this.ps.executeQuery();

        int state;
        while (this.rs.next()) {
            state = this.rs.getInt(2);
            Gomoku.leftStonesForPlayer1 = this.rs.getInt(3);
            Gomoku.leftStonesForPlayer2 = this.rs.getInt(4);
            Gomoku.leftHintsForPlayer1 = this.rs.getInt(5);
            Gomoku.leftHintsForPlayer2 = this.rs.getInt(6);
            if (!this.rs.wasNull() && state != 1) {
                playPositionBtn.setEnabled(true);
            } else {
                playPositionBtn.setEnabled(false);
            }
        }

        //Adjust hint button and text field according to the game state
        if (Gomoku.playerTurn) {
            leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer1));
            if (Gomoku.leftHintsForPlayer1 == 0) {
                hintBtn.setEnabled(false);
            } else {
                hintBtn.setEnabled(true);
            }
        } else {
            leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer2));
            if (Gomoku.leftHintsForPlayer2 == 0) {
                hintBtn.setEnabled(false);
            } else {
                hintBtn.setEnabled(true);
            }
        }

        //----- Center window
        Dimension screenSize, frameSize;
        int x, y;
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frameSize = getSize();
        x = (screenSize.width - frameSize.width) / 2;
        y = (screenSize.height - frameSize.height) / 2;
        setLocation(x, y);

        this.setResizable(false);

        Image icon = Toolkit.getDefaultToolkit().getImage(Home.class.getResource("/images/g1.png"));
        this.setIconImage(icon);

        this.setTitle("Gomoku");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        contentPane = new javax.swing.JPanel();
        boardPane = new javax.swing.JPanel();
        depthCB = new javax.swing.JComboBox<>();
        playPositionBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        hommeMachineCB = new javax.swing.JComboBox<>();
        leftHintText = new javax.swing.JTextField();
        leftBlackStonesText = new javax.swing.JTextField();
        difficultyLevelLabel = new javax.swing.JLabel();
        playModeLabel = new javax.swing.JLabel();
        resultValueLbl = new javax.swing.JLabel();
        stonesLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        deconnexionBtn = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        resultText = new javax.swing.JTextField();
        WhiteStonesLabel = new javax.swing.JLabel();
        BlackStonesLabel = new javax.swing.JLabel();
        hintBtn = new javax.swing.JButton();
        playNewBtn = new javax.swing.JButton();
        leftWhiteStonesText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setBackground(new java.awt.Color(204, 255, 204));

        contentPane.setBackground(new java.awt.Color(255, 204, 204));
        contentPane.setMinimumSize(new java.awt.Dimension(700, 600));
        contentPane.setPreferredSize(new java.awt.Dimension(700, 600));
        contentPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        boardPane.setBackground(new java.awt.Color(255, 102, 153));
        boardPane.setForeground(new java.awt.Color(255, 255, 255));
        boardPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        boardPane.setMinimumSize(new java.awt.Dimension(570, 570));
        boardPane.setPreferredSize(new java.awt.Dimension(570, 570));

        javax.swing.GroupLayout boardPaneLayout = new javax.swing.GroupLayout(boardPane);
        boardPane.setLayout(boardPaneLayout);
        boardPaneLayout.setHorizontalGroup(
                boardPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 570, Short.MAX_VALUE)
        );
        boardPaneLayout.setVerticalGroup(
                boardPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 570, Short.MAX_VALUE)
        );

        contentPane.add(boardPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 570, 570));
        boardPane.getAccessibleContext().setAccessibleName("");

        depthCB.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        depthCB.setForeground(new java.awt.Color(255, 51, 153));
        depthCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Level 1", "Level 2", "Level 3"}));
        contentPane.add(depthCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 40, 123, -1));

        playPositionBtn.setBackground(new java.awt.Color(255, 0, 102));
        playPositionBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        playPositionBtn.setForeground(new java.awt.Color(255, 255, 255));
        playPositionBtn.setText("Load Game");
        playPositionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPositionBtnActionPerformed(evt);
            }
        });
        contentPane.add(playPositionBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 430, 170, 40));

        saveBtn.setBackground(new java.awt.Color(255, 102, 153));
        saveBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveBtn.setText("Save Game");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        contentPane.add(saveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 500, 164, 40));

        hommeMachineCB.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        hommeMachineCB.setForeground(new java.awt.Color(255, 102, 153));
        hommeMachineCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"COMPUTER", "HUMAN"}));
        hommeMachineCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hommeMachineCBActionPerformed(evt);
            }
        });
        contentPane.add(hommeMachineCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, -1, -1));

        leftHintText.setEditable(false);
        leftHintText.setBackground(new java.awt.Color(255, 255, 255));
        leftHintText.setText("3");
        leftHintText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftHintTextActionPerformed(evt);
            }
        });
        contentPane.add(leftHintText, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 265, 50, -1));

        leftBlackStonesText.setEditable(false);
        leftBlackStonesText.setBackground(new java.awt.Color(255, 255, 255));
        leftBlackStonesText.setColumns(60);
        leftBlackStonesText.setText("60");
        leftBlackStonesText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBlackStonesTextActionPerformed(evt);
            }
        });
        contentPane.add(leftBlackStonesText, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 200, 50, -1));

        difficultyLevelLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        difficultyLevelLabel.setText("Difficulty Level");
        contentPane.add(difficultyLevelLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 40, -1, -1));

        playModeLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        playModeLabel.setText("Play Mode");
        contentPane.add(playModeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, -1, -1));

        resultValueLbl.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        contentPane.add(resultValueLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 424, 131, -1));

        stonesLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        stonesLabel.setForeground(new java.awt.Color(255, 0, 153));
        stonesLabel.setText("Stones left:");
        contentPane.add(stonesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 120, 30));
        contentPane.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 50, -1));

        deconnexionBtn.setBackground(new java.awt.Color(255, 102, 153));
        deconnexionBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        deconnexionBtn.setForeground(new java.awt.Color(255, 255, 255));
        deconnexionBtn.setText("Log Out");
        deconnexionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnexionBtnActionPerformed(evt);
            }
        });
        contentPane.add(deconnexionBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 570, 130, 40));

        exit.setBackground(new java.awt.Color(225, 7, 14));
        exit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("Exit");
        exit.setToolTipText("");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        contentPane.add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 570, 120, 40));

        resultText.setEditable(false);
        resultText.setBackground(new java.awt.Color(255, 255, 255));
        resultText.setText("No Results");
        resultText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultTextActionPerformed(evt);
            }
        });
        contentPane.add(resultText, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 350, 190, 40));

        WhiteStonesLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        WhiteStonesLabel.setForeground(new java.awt.Color(255, 255, 255));
        WhiteStonesLabel.setText("White ");
        contentPane.add(WhiteStonesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 70, 20));

        BlackStonesLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        BlackStonesLabel.setText("Black ");
        contentPane.add(BlackStonesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 70, 20));

        hintBtn.setBackground(new java.awt.Color(255, 153, 204));
        hintBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        hintBtn.setForeground(new java.awt.Color(255, 255, 255));
        hintBtn.setText("Hints");
        hintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintBtnActionPerformed(evt);
            }
        });
        contentPane.add(hintBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, 130, 40));

        playNewBtn.setBackground(new java.awt.Color(255, 153, 204));
        playNewBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        playNewBtn.setForeground(new java.awt.Color(255, 255, 255));
        playNewBtn.setText("Play");
        playNewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playNewBtnActionPerformed(evt);
            }
        });
        contentPane.add(playNewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 30, 130, 40));

        leftWhiteStonesText.setEditable(false);
        leftWhiteStonesText.setBackground(new java.awt.Color(255, 255, 255));
        leftWhiteStonesText.setText("60");
        leftWhiteStonesText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftWhiteStonesTextActionPerformed(evt);
            }
        });
        contentPane.add(leftWhiteStonesText, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 150, 50, -1));
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(contentPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(contentPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    //------------ Exit Button ----------
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {
        setDefaultCloseOperation(Home.DISPOSE_ON_CLOSE);
        setVisible(false);
    }

    //------------ Log out Button ----------
    private void deconnexionBtnActionPerformed(java.awt.event.ActionEvent evt) {
        int a = JOptionPane.showConfirmDialog(null, "Log Out ?");
        if (a == JOptionPane.YES_OPTION) {
            this.idUser = 0;
            dispose();

            try {
                Authentication auth = new Authentication();
                auth.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    //------------ Save Game Button ----------
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {

        GomokuPosition pos = (GomokuPosition) Gomoku.position;
        String br = "";

        // getting the current board state
        int state = 0;
        for (int i = 0; i < 19; i++) {
            for (int j = 0; j < 19; j++) {
                br = br + pos.getBoard()[i][j] + " ";
            }
        }

        // getting the game state (if it's over or not)
        if (pos.state() || Gomoku.gameOver) {
            state = 1;
        } else {
            state = 0;
        }

        //------------ create new game in the database if the game Id == 0 ----------
        if (idPartie == 0) {
            try {
                String qry = "insert into game (board, state, left_black_stones, left_white_stones, left_black_hints, left_white_hints, id_user) values(?, ?, ?, ?, ?, ?, ?)";
                this.ps = this.connection.prepareStatement(qry);
                this.ps.setString(1, br);
                this.ps.setInt(2, state);
                ps.setInt(3, Gomoku.leftStonesForPlayer1);
                ps.setInt(4, Gomoku.leftStonesForPlayer2);
                ps.setInt(5, Gomoku.leftHintsForPlayer1);
                ps.setInt(6, Gomoku.leftHintsForPlayer2);
                ps.setInt(7, Home.idUser);
                this.ps.execute();

                JOptionPane.showMessageDialog(this, "Saved", "Game Saved !", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } //------------ Otherwise, update the game in the database ----------
        else {
            try {
                String qry = "update game set board = ?, state = ?, left_black_stones = ?, left_white_stones = ?, left_black_hints = ?, left_white_hints = ? where id_game = ?";
                this.ps = this.connection.prepareStatement(qry);
                this.ps.setString(1, br);
                this.ps.setInt(2, state);
                ps.setInt(3, Gomoku.leftStonesForPlayer1);
                ps.setInt(4, Gomoku.leftStonesForPlayer2);
                ps.setInt(5, Gomoku.leftHintsForPlayer1);
                ps.setInt(6, Gomoku.leftHintsForPlayer2);
                this.ps.setInt(7, idPartie);
                this.ps.execute();

                JOptionPane.showMessageDialog(this, "Updated", "Game Updated !", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    //----------- Hint Button --------
    private void hintBtnActionPerformed(java.awt.event.ActionEvent evt) {
        PlayGomoku.gomoku.giveHint();
        if (Gomoku.playerTurn && Gomoku.leftHintsForPlayer1 > 0) {
            Gomoku.leftHintsForPlayer1 -= 1;
            Home.leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer1));

        } else if (!Gomoku.playerTurn && Gomoku.leftHintsForPlayer2 > 0) {
            Gomoku.leftHintsForPlayer2 -= 1;
            Home.leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer2));

        } else {
            JOptionPane.showMessageDialog(null, "Sorry, you can not ask for more hints.");
        }

    }

    private void leftHintTextActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void resultTextActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void leftBlackStonesTextActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void hommeMachineCBActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    //--------- Load Game Button ----------
    private void playPositionBtnActionPerformed(java.awt.event.ActionEvent evt) {

        saveBtn.setEnabled(true);

        try {

            System.out.println(idUser);
            String br = "";
            int idGame = 0;

            /**
             * *********************************************************************
             * Retrieving game id and game state elements from the database
             * *******************************************************************
             */
            String qry = "select id_game, board, state, left_black_stones, left_white_stones, left_black_hints, left_white_hints from game where id_user = ?";
            this.ps = this.connection.prepareStatement(qry);
            this.ps.setInt(1, this.idUser);
            this.rs = this.ps.executeQuery();

            int state;
            while (this.rs.next()) {
                idGame = this.rs.getInt(1);
                br = this.rs.getString(2);
                state = this.rs.getInt(3);
                Gomoku.leftStonesForPlayer1 = this.rs.getInt(4);
                Gomoku.leftStonesForPlayer2 = this.rs.getInt(5);
                Gomoku.leftHintsForPlayer1 = this.rs.getInt(6);
                Gomoku.leftHintsForPlayer2 = this.rs.getInt(7);
            }

            idPartie = idGame;

            /**
             * ***************************************************************
             * Converting the String describing the board, retrieved from
             * the database, into an list of strings and storing it in a 
             * array of integers size of 19x19  
             * ***************************************************************
            */
            String[] rows = new String[19];

            List<String> strings = new ArrayList<String>();
            int index = 0;
            while (index < br.length()) {
                strings.add(br.substring(index, Math.min(index + 42, br.length())));
                index += 38;
            }
            System.out.println("rows length" + rows.length);
            System.out.println("strings length" + strings.size());
            for (int i = 0; i < strings.size() - 1; i++) {
                rows[i] = strings.get(i);
                System.out.println("i " + i + "value" + rows[i]);

            }

            int[][] brd = new int[19][19];

            for (int i = 0; i < rows.length; i++) {
                String[] columns = rows[i].split(" ");
                for (int j = 0; j < 19; j++) {
                    if (!columns[j].equals(" ") && columns[j] != null && !columns[j].equals("")) {
                        brd[i][j] = Integer.parseInt(columns[j]);
                        System.out.println("i " + i + " ,j " + j + " value" + brd[i][j]);
                    }
                }
            }

            // create a new GomokuPosition with the retrieved board and assign
            // it to the game position static attribute
            GomokuPosition p = new GomokuPosition();
            p.setBoard(brd);
            Gomoku.position = p;

            // updating the game board and other game elements
            PlayGomoku.gomoku.board.setBoardFromGomokuPosition(p);
            boardPane.repaint();
            
            Home.leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer1));

            Home.leftBlackStonesText.setText(Integer.toString(Gomoku.leftStonesForPlayer1));

            Home.leftWhiteStonesText.setText(Integer.toString(Gomoku.leftStonesForPlayer2));
            
            // starting the game
            play();

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //--------- New Game Button ----------
    private void playNewBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String br = "";
        for (int i = 0; i < 19; i++) {
            for (int j = 0; j < 19; j++) {
                br = br + "0 ";
            }
        }

        int idGame = 0;
        try {
            String query = "select id_game from game where id_user = ?";
            this.ps = this.connection.prepareStatement(query);
            ps.setInt(1, idUser);
            this.rs = this.ps.executeQuery();

            while (this.rs.next()) {
                idGame = this.rs.getInt(1);
                break;
            }
            idPartie = idGame;

            Gomoku.gameOver = false;
            Gomoku.leftHintsForPlayer1 = 3;
            Gomoku.leftHintsForPlayer2 = 3;
            Home.leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer1));

            Gomoku.leftStonesForPlayer1 = 60;
            Home.leftBlackStonesText.setText(Integer.toString(Gomoku.leftStonesForPlayer1));

            Gomoku.leftStonesForPlayer2 = 60;
            Home.leftWhiteStonesText.setText(Integer.toString(Gomoku.leftStonesForPlayer2));

            saveBtn.setEnabled(true);
            int state = 0;
            int indexDepth = this.depthCB.getSelectedIndex();
            System.out.println("Index Depth " + indexDepth);
            switch (indexDepth) {
                case 0: // Facile
                    Gomoku.depth = 2;
                    break;
                case 1: // Moyen
                    Gomoku.depth = 3;
                    break;
                case 2: // Difficile
                    Gomoku.depth = 5;
                    break;
            }

            int mode = this.hommeMachineCB.getSelectedIndex();
            System.out.println("Play Mode " + mode);
            switch (mode) {
                case 0: // Machine Vs Humain
                    Gomoku.playMode = Gomoku.PlayModeType.HUMAN_VS_COMPUTER;
                    break;
                case 1: // Humain Vs Humain
                    Gomoku.playMode = Gomoku.PlayModeType.HUMAN_VS_HUMAN;
                    break;
            }
            String qry = "update game set board = ?, state = ?, left_black_stones = ?, left_white_stones = ?, left_black_hints = ?, left_white_hints = ? where id_game = ?";
            this.ps = this.connection.prepareStatement(qry);
            this.ps.setString(1, br);
            this.ps.setInt(2, state);
            ps.setInt(3, Gomoku.leftStonesForPlayer1);
            ps.setInt(4, Gomoku.leftStonesForPlayer2);
            ps.setInt(5, Gomoku.leftHintsForPlayer1);
            ps.setInt(6, Gomoku.leftHintsForPlayer2);
            this.ps.setInt(7, idGame);
            this.ps.execute();
            System.out.println("Index Depth " + Gomoku.depth);
            Gomoku.gameOver = false;
            GomokuPosition p = new GomokuPosition();
            Gomoku.position = p;
            PlayGomoku.gomoku.board.setBoardFromGomokuPosition(p);

            play();

        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void play() {
        new Thread(new PlayGomoku()).start();

    }

    private void leftWhiteStonesTextActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel BlackStonesLabel;
    private javax.swing.JLabel WhiteStonesLabel;
    private javax.swing.JPanel boardPane;
    private javax.swing.JPanel contentPane;
    private javax.swing.JButton deconnexionBtn;
    private javax.swing.JComboBox<String> depthCB;
    private javax.swing.JLabel difficultyLevelLabel;
    private javax.swing.JButton exit;
    public static javax.swing.JButton hintBtn;
    private javax.swing.JComboBox<String> hommeMachineCB;
    private javax.swing.JLabel jLabel8;
    public static javax.swing.JTextField leftBlackStonesText;
    public static javax.swing.JTextField leftHintText;
    public static javax.swing.JTextField leftWhiteStonesText;
    private javax.swing.JLabel playModeLabel;
    private javax.swing.JButton playNewBtn;
    private javax.swing.JButton playPositionBtn;
    public static javax.swing.JTextField resultText;
    private javax.swing.JLabel resultValueLbl;
    public static javax.swing.JButton saveBtn;
    private javax.swing.JLabel stonesLabel;
    // End of variables declaration                   
}
