/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package gui;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import tools.ConnectionManager;
import tools.EncryptPassword;
import gomokugame.Gomoku;

/**
 *
 * @author MSI
 */
public class Inscription extends javax.swing.JFrame {

    /**
     * *************************************************************************
     * Les élèment de connection à la base de données *************************
     *************************************************************************
     */
    Connection connection = null;
    ResultSet rs = null;
    ResultSet rs2 = null;
    PreparedStatement ps = null;
    EncryptPassword encryptPwd;

    //------------ Cosnstructeur ----------
    public Inscription() throws SQLException, ClassNotFoundException {
        initComponents();
        this.errorLbl.setVisible(false);

        //--------- Se connecter à la BDD 
        connection = ConnectionManager.getConnection();

        //----- Centrer la fenetre 
        Dimension screenSize, frameSize;
        int x, y;
        screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frameSize = getSize();
        x = (screenSize.width - frameSize.width) / 2;
        y = (screenSize.height - frameSize.height) / 2;
        setLocation(x, y);

        //------ mettre la fenetre non Resizable
        this.setResizable(false);

        //------ Icon de frame
        Image icon = Toolkit.getDefaultToolkit().getImage(Inscription.class.getResource("/images/g1.png"));
        this.setIconImage(icon);

        //------ Titre de frame
        this.setTitle("Sign In");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        contentPane = new javax.swing.JPanel();
        titleLbl = new javax.swing.JLabel();
        emailLbl = new javax.swing.JLabel();
        passwordLbl = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        passwordTxt = new javax.swing.JPasswordField();
        nomTxt = new javax.swing.JTextField();
        nomLbl = new javax.swing.JLabel();
        inscriptionBtn = new javax.swing.JButton();
        errorLbl = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        connexionBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 255));

        contentPane.setBackground(new java.awt.Color(255, 204, 204));
        contentPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleLbl.setBackground(new java.awt.Color(0, 0, 0));
        titleLbl.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(255, 102, 153));
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("Sign In");
        contentPane.add(titleLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 0, 467, 73));

        emailLbl.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        emailLbl.setForeground(new java.awt.Color(255, 255, 255));
        emailLbl.setText("Email");
        contentPane.add(emailLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 127, 41));

        passwordLbl.setBackground(new java.awt.Color(255, 255, 255));
        passwordLbl.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        passwordLbl.setForeground(new java.awt.Color(255, 255, 255));
        passwordLbl.setText("Password");
        contentPane.add(passwordLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 230, -1, 42));

        emailTxt.setBackground(new java.awt.Color(250, 249, 241));
        emailTxt.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        emailTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        emailTxt.setToolTipText("Entrer votre e-mail ici");
        contentPane.add(emailTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, 224, 41));

        passwordTxt.setBackground(new java.awt.Color(250, 249, 241));
        passwordTxt.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        passwordTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        contentPane.add(passwordTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 230, 224, 42));

        nomTxt.setBackground(new java.awt.Color(250, 249, 241));
        nomTxt.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        nomTxt.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        contentPane.add(nomTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 90, 224, 41));

        nomLbl.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        nomLbl.setForeground(new java.awt.Color(255, 255, 255));
        nomLbl.setText("Name");
        contentPane.add(nomLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 127, 41));

        inscriptionBtn.setBackground(new java.awt.Color(255, 102, 153));
        inscriptionBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        inscriptionBtn.setForeground(new java.awt.Color(255, 255, 255));
        inscriptionBtn.setText("Sign In");
        inscriptionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inscriptionBtnActionPerformed(evt);
            }
        });
        contentPane.add(inscriptionBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 300, 90, 40));

        errorLbl.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        errorLbl.setForeground(new java.awt.Color(255, 0, 0));
        errorLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLbl.setText("Account exits already!");
        contentPane.add(errorLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 360, -1, 31));

        exit.setBackground(new java.awt.Color(225, 7, 14));
        exit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        exit.setForeground(new java.awt.Color(255, 255, 255));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        contentPane.add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 380, 80, 41));

        connexionBtn.setBackground(new java.awt.Color(255, 102, 153));
        connexionBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        connexionBtn.setForeground(new java.awt.Color(255, 255, 255));
        connexionBtn.setText("Log In");
        connexionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexionBtnActionPerformed(evt);
            }
        });
        contentPane.add(connexionBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 300, 90, 41));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    //------------ Button d'inscription ----------
    private void inscriptionBtnActionPerformed(java.awt.event.ActionEvent evt) {                                               
        String username = this.nomTxt.getText();
        String email = this.emailTxt.getText();
        String password = this.passwordTxt.getText();

        int state = 0;
        int[] board = new int[361];
        for (int i = 0; i < 361; i++) {
            board[i] = 0;
        }
        String br = "";
        for (int i = 0; i < 361; i++) {
            br = br + Integer.toString(board[i]) + " ";
        }

        int idUser = 0;

        Gomoku.leftHintsForPlayer1 = 3;
        Gomoku.leftHintsForPlayer2 = 3;

        Gomoku.leftStonesForPlayer1 = 60;

        Gomoku.leftStonesForPlayer2 = 60;

        try {
            try {
                encryptPwd = new EncryptPassword();
            } catch (Exception ex) {
                Logger.getLogger(Authentication.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.errorLbl.setVisible(false);

            //------- la requete d'insertion
            String qry = "insert into user(username, email, password) values(? , ?, ?)";
            ps = connection.prepareStatement(qry);
            ps.setString(1, username);
            ps.setString(2, email);
            ps.setString(3, encryptPwd.encrypt(password));
            ps.executeUpdate();

            //------- la requete d'insertion
            String findUserQuery = "select id_user from user where email=? and password=?";
            ps = connection.prepareStatement(findUserQuery);
            ps.setString(1, email);
            ps.setString(2, encryptPwd.encrypt(password));
            rs = ps.executeQuery();

            while (this.rs.next()) {

                //------ retourner l'id de l'tilisateur
                idUser = this.rs.getInt(1);

                //------ fermer la page d'authentification
                dispose();
                errorLbl.setVisible(false);

                break;
            }

            //------- la requete d'insertion
            String positionQuery = "insert into game (board, state, left_black_stones, left_white_stones, left_black_hints, left_white_hints, id_user) values(?, ?, ?, ?, ?, ?, ?)";
            ps = connection.prepareStatement(positionQuery);
            ps.setString(1, br);
            ps.setInt(2, state);
            ps.setInt(3, Gomoku.leftStonesForPlayer1);
            ps.setInt(4, Gomoku.leftStonesForPlayer2);
            ps.setInt(5, Gomoku.leftHintsForPlayer1);
            ps.setInt(6, Gomoku.leftHintsForPlayer2);
            ps.setInt(7, idUser);

            ps.executeUpdate();

            //------- On s'authentifier en recuperant l'email et le password
            Authentication auth = new Authentication(email, password);
            auth.setVisible(true);

            dispose();  //-----fermer la fenêtre

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            this.errorLbl.setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Inscription.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                              

    //------------ Button Quitter ----------
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {                                     
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        dispose();
    }                                    

    //------------ Button de connexion ----------
    private void connexionBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             

        try {
            Authentication auth = new Authentication();
            auth.setVisible(true);
            this.dispose();

        } catch (SQLException ex) {
            Logger.getLogger(Inscription.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Inscription.class.getName()).log(Level.SEVERE, null, ex);
        }


    }                                            

    // Variables declaration - do not modify                     
    private javax.swing.JButton connexionBtn;
    private javax.swing.JPanel contentPane;
    private javax.swing.JLabel emailLbl;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel errorLbl;
    private javax.swing.JButton exit;
    private javax.swing.JButton inscriptionBtn;
    private javax.swing.JLabel nomLbl;
    private javax.swing.JTextField nomTxt;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration                   
}
