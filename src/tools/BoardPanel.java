/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package tools;

import gomokugame.*;
import gui.Home;
import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author MSI
 */
public class BoardPanel extends javax.swing.JPanel {

    public Cell board[][];
    public int TAILLE_BOARD = 570;

    //------- Constructor -----------
    public BoardPanel() {
        initComponents();
        initialization();
    }

    //----------- Getter and Setter for the board attribute--------------
    public Cell[][] getBoard() {
        return board;
    }

    public void setBoard(Cell[][] board) {
        this.board = board;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setBackground(new java.awt.Color(255, 204, 204));
        setPreferredSize(new java.awt.Dimension(760, 760));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 487, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 428, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    /*
    * This method initialize the board and the game state when the user signs in
    */
    public void initialization() {

        //------ L'instanciation 
        board = new Cell[19][19];

        int count = 0;
        for (int i = 0; i < 19; i++) {
            for (int j = 0; j < 19; j++) {
                count++;
                if (count % 20 == 0) {
                    break;
                }
                board[i][j] = new Cell(i, j);
                board[i][j].setBounds(j * Cell.TAILLE_CELL, i * Cell.TAILLE_CELL, Cell.TAILLE_CELL, Cell.TAILLE_CELL);
                int indexX = i;
                int indexY = j;
                Cell cel = board[i][j];
                board[i][j].addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        //setAIThinking(false);
                        System.out.println("Mouse Clicked\n ");
                        Position startingPosition = Gomoku.position;
                        System.out.println("x:" + indexX);
                        System.out.println("x:" + indexY);
                        if (Gomoku.playMode == Gomoku.PlayModeType.HUMAN_VS_COMPUTER && !Gomoku.gameOver && Gomoku.canClick && Gomoku.playerTurn) {

                            for (int i = 0; i < 19; i++) {
                                for (int j = 0; j < 19; j++) {
                                    if (indexX == i && indexY == j) {
                                        Gomoku.isClicked = true;
                                        Gomoku.stoneX = indexX;
                                        Gomoku.stoneY = indexY;
                                        Move move = PlayGomoku.gomoku.createMove();
                                        startingPosition = (Position) PlayGomoku.gomoku.makeMove(startingPosition, Gomoku.playerTurn, move);
                                        cel.drawStone(Color.BLACK);
                                        PlayGomoku.gomoku.printPosition(startingPosition);
                                        if (PlayGomoku.gomoku.wonPosition(startingPosition, GameSearch.HUMAN)) {
                                            JOptionPane.showMessageDialog(null, "Human won!");
                                            Home.resultText.setText("Human won!");
                                            Gomoku.gameOver = true;
                                            return;
                                        } else if (PlayGomoku.gomoku.drawnPosition(startingPosition)) {
                                            JOptionPane.showMessageDialog(null, "Draw game!");
                                            Home.resultText.setText("Draw game!");
                                            Gomoku.gameOver = true;
                                            return;
                                        }
                                    }
                                }
                            }
                            cel.repaint();
                            Gomoku.position = (GomokuPosition) startingPosition;
                            System.out.println("Printing\n" + Gomoku.position);
                            setBoardFromGomokuPosition(Gomoku.position);

                            Gomoku.playerTurn = GameSearch.PROGRAM;
                            if (Gomoku.playMode == Gomoku.PlayModeType.HUMAN_VS_COMPUTER) {
                                Gomoku.canClick = false;
                            } else {
                                Gomoku.canClick = true;
                            }

                            if (!Gomoku.gameOver && !Gomoku.canClick && !Gomoku.playerTurn) {

                                Thread thread = new Thread(new Runnable() {
                                    public void run() {
                                        setAIThinking(true);
                                        Position startingPosition = Gomoku.position;
                                        PlayGomoku.gomoku.printPosition(startingPosition);
                                        Vector v = PlayGomoku.gomoku.alphaBeta(0, startingPosition, GameSearch.PROGRAM);
                                        Enumeration enum2 = v.elements();

                                        startingPosition = (Position) v.elementAt(1);
                                        Gomoku.position = (GomokuPosition) startingPosition;
                                        setBoardFromGomokuPosition(Gomoku.position);
                                        Gomoku.leftStonesForPlayer2 -= 1;
                                        Home.leftWhiteStonesText.setText(Integer.toString(Gomoku.leftStonesForPlayer2));
                                        Gomoku.playerTurn = GameSearch.HUMAN;
                                        Gomoku.canClick = true;

                                        if (PlayGomoku.gomoku.wonPosition(startingPosition, GameSearch.PROGRAM)) {
                                            JOptionPane.showMessageDialog(null, "Computer won!");
                                            Home.resultText.setText("Computer won!");
                                            Gomoku.gameOver = true;

                                            return;
                                        } else if (PlayGomoku.gomoku.drawnPosition(startingPosition)) {
                                            JOptionPane.showMessageDialog(null, "Draw game!");
                                            Home.resultText.setText("Draw game!");
                                            Gomoku.gameOver = true;
                                            return;
                                        }
                                    }
                                });

                                thread.setPriority(Thread.MAX_PRIORITY);
                                thread.start();
                                Gomoku.canClick = true;
                                setAIThinking(false);
                                setBoardFromGomokuPosition(Gomoku.position);
                            }
                        } else if (Gomoku.playMode == Gomoku.PlayModeType.HUMAN_VS_HUMAN && !Gomoku.gameOver && Gomoku.canClick) {

                            startingPosition = Gomoku.position;
                            if (Gomoku.playerTurn) {
                                for (int i = 0; i < 19; i++) {
                                    for (int j = 0; j < 19; j++) {
                                        if (indexX == i && indexY == j) {
                                            Gomoku.isClicked = true;
                                            Gomoku.stoneX = indexX;
                                            Gomoku.stoneY = indexY;
                                            Move move = PlayGomoku.gomoku.createMove();
                                            startingPosition = (Position) PlayGomoku.gomoku.makeMove(startingPosition, GameSearch.HUMAN, move);

                                            Gomoku.position = (GomokuPosition) startingPosition;
                                            setBoardFromGomokuPosition(Gomoku.position);
                                            PlayGomoku.gomoku.printPosition(startingPosition);
                                            if (PlayGomoku.gomoku.wonPosition(startingPosition, GameSearch.HUMAN)) {
                                                JOptionPane.showMessageDialog(null, "First Player won!");
                                                Home.resultText.setText("First Player won!");
                                                Gomoku.gameOver = true;
                                                return;
                                            } else if (PlayGomoku.gomoku.drawnPosition(startingPosition)) {
                                                JOptionPane.showMessageDialog(null, "Draw game!");
                                                Home.resultText.setText("Draw game!");
                                                Gomoku.gameOver = true;
                                                return;
                                            }
                                        }
                                    }

                                    cel.repaint();
                                    Gomoku.playerTurn = GameSearch.PROGRAM;
                                    Gomoku.canClick = true;
                                    Gomoku.position = (GomokuPosition) startingPosition;
                                    System.out.println("Printing\n" + Gomoku.position);
                                    setBoardFromGomokuPosition(Gomoku.position);
                                }

                            } else {
                                for (int i = 0; i < 19; i++) {
                                    for (int j = 0; j < 19; j++) {
                                        if (indexX == i && indexY == j) {
                                            Gomoku.isClicked = true;
                                            Gomoku.stoneX = indexX;
                                            Gomoku.stoneY = indexY;
                                            Move move = PlayGomoku.gomoku.createMove();
                                            startingPosition = (Position) PlayGomoku.gomoku.makeMove(startingPosition, GameSearch.PROGRAM, move);

                                            Gomoku.position = (GomokuPosition) startingPosition;
                                            setBoardFromGomokuPosition(Gomoku.position);
                                            PlayGomoku.gomoku.printPosition(startingPosition);
                                            if (PlayGomoku.gomoku.wonPosition(startingPosition, GameSearch.PROGRAM)) {
                                                JOptionPane.showMessageDialog(null, "Second Player won!");
                                                Home.resultText.setText("Second Player won!");
                                                Gomoku.gameOver = true;
                                                return;
                                            } else if (PlayGomoku.gomoku.drawnPosition(startingPosition)) {
                                                JOptionPane.showMessageDialog(null, "Draw game!");
                                                Home.resultText.setText("Draw game!");
                                                Gomoku.gameOver = true;
                                                return;
                                            }
                                        }
                                    }

                                    cel.repaint();
                                    Gomoku.playerTurn = GameSearch.HUMAN;
                                    Gomoku.canClick = true;
                                    Gomoku.position = (GomokuPosition) startingPosition;
                                    System.out.println("Printing\n" + Gomoku.position);
                                    setBoardFromGomokuPosition(Gomoku.position);
                                }

                            }

                        }
                    }
                });

                this.add(board[i][j]);

            }

            count = 0;
        }

        this.repaint();
    }

    /*
    * This method is called whenever we want to update the board with
    * a given GomokuPosition
    */
    public void setBoardFromGomokuPosition(GomokuPosition position) {

        int count = 0;
        for (int i = 0; i < 19; i++) {
            for (int j = 0; j < 19; j++) {
                count++;
                if (count % 20 == 0) {
                    break;
                }
                if (position.board[i][j] == 1) {
                    board[i][j].drawStone(Color.BLACK);
                    //System.out.println("Black("+i+", "+j+")");
                } else if (position.board[i][j] == -1) {
                    board[i][j].drawStone(Color.WHITE);
                    //System.out.println("White ("+i+", "+j+")");
                } else if (position.board[i][j] == 0) {
                    board[i][j].removeStone();
                }
            }
            count = 0;
        }
        if (Gomoku.playerTurn) {
            Home.leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer1));
            if (Gomoku.leftHintsForPlayer1 == 0) {
                Home.hintBtn.setEnabled(false);
            } else {
                Home.hintBtn.setEnabled(true);
            }
        } else {
            Home.leftHintText.setText(Integer.toString(Gomoku.leftHintsForPlayer2));
            if (Gomoku.leftHintsForPlayer2 == 0) {
                Home.hintBtn.setEnabled(false);
            } else {
                Home.hintBtn.setEnabled(true);
            }
        }
        Home.resultText.setText("No results yet");
        setAIThinking(false);
    }

    /*
    * This method is called whenever the game state is changed in
    * order to update the window
    */
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2D = (Graphics2D) g.create();

        if (Gomoku.isAIThinking) {
            printThinking(g2D);
        }
    }

    /*
    * This method prints Thinking... in the window and its called 
    * whenever its the machine's turn
    */
    private void printThinking(Graphics2D g2D) {

        FontMetrics metrics = g2D.getFontMetrics(g2D.getFont());
        String text = "Thinking...";

        g2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        g2D.setFont(new java.awt.Font("Times New Roman", 1, 38));

        g2D.setColor(Color.WHITE);

        int x = (570 / 2 - metrics.stringWidth(text) * 2);
        int y = 570 / 2;

        g2D.drawString(text, x, y);
    }

    /*
    * This method is called to update the isAIThinking attribute state
    */
    public void setAIThinking(boolean flag) {
        Gomoku.isAIThinking = flag;
        repaint();
    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
}
